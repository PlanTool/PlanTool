# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ff', [dirname(__file__)])
        except ImportError:
            import _ff
            return _ff
        if fp is not None:
            try:
                _mod = imp.load_module('_ff', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ff = swig_import_helper()
    del swig_import_helper
else:
    import _ff
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_ff.SAME_swigconstant(_ff)
SAME = _ff.SAME

_ff.HIDDEN_STR_swigconstant(_ff)
HIDDEN_STR = _ff.HIDDEN_STR

_ff.AXIOM_STR_swigconstant(_ff)
AXIOM_STR = _ff.AXIOM_STR

_ff.NAME_STR_swigconstant(_ff)
NAME_STR = _ff.NAME_STR

_ff.VARIABLE_STR_swigconstant(_ff)
VARIABLE_STR = _ff.VARIABLE_STR

_ff.STANDARD_TYPE_swigconstant(_ff)
STANDARD_TYPE = _ff.STANDARD_TYPE

_ff.EITHER_STR_swigconstant(_ff)
EITHER_STR = _ff.EITHER_STR

_ff.MAX_LENGTH_swigconstant(_ff)
MAX_LENGTH = _ff.MAX_LENGTH

_ff.CONNECTOR_swigconstant(_ff)
CONNECTOR = _ff.CONNECTOR

_ff.RELAXED_STEPS_DEFAULT_swigconstant(_ff)
RELAXED_STEPS_DEFAULT = _ff.RELAXED_STEPS_DEFAULT

_ff.EHC_HASH_SIZE_swigconstant(_ff)
EHC_HASH_SIZE = _ff.EHC_HASH_SIZE

_ff.EHC_HASH_BITS_swigconstant(_ff)
EHC_HASH_BITS = _ff.EHC_HASH_BITS

_ff.PLAN_HASH_SIZE_swigconstant(_ff)
PLAN_HASH_SIZE = _ff.PLAN_HASH_SIZE

_ff.PLAN_HASH_BITS_swigconstant(_ff)
PLAN_HASH_BITS = _ff.PLAN_HASH_BITS

_ff.BFS_HASH_SIZE_swigconstant(_ff)
BFS_HASH_SIZE = _ff.BFS_HASH_SIZE

_ff.BFS_HASH_BITS_swigconstant(_ff)
BFS_HASH_BITS = _ff.BFS_HASH_BITS

_ff.BIG_INT_swigconstant(_ff)
BIG_INT = _ff.BIG_INT

_ff.MAX_CONSTANTS_swigconstant(_ff)
MAX_CONSTANTS = _ff.MAX_CONSTANTS

_ff.MAX_PREDICATES_swigconstant(_ff)
MAX_PREDICATES = _ff.MAX_PREDICATES

_ff.MAX_TYPES_swigconstant(_ff)
MAX_TYPES = _ff.MAX_TYPES

_ff.MAX_ARITY_swigconstant(_ff)
MAX_ARITY = _ff.MAX_ARITY

_ff.MAX_VARS_swigconstant(_ff)
MAX_VARS = _ff.MAX_VARS

_ff.MAX_TYPE_swigconstant(_ff)
MAX_TYPE = _ff.MAX_TYPE

_ff.MAX_OPERATORS_swigconstant(_ff)
MAX_OPERATORS = _ff.MAX_OPERATORS

_ff.MAX_HITTING_SET_DEFAULT_swigconstant(_ff)
MAX_HITTING_SET_DEFAULT = _ff.MAX_HITTING_SET_DEFAULT

_ff.MAX_TYPE_INTERSECTIONS_swigconstant(_ff)
MAX_TYPE_INTERSECTIONS = _ff.MAX_TYPE_INTERSECTIONS

_ff.MAX_RELEVANT_FACTS_swigconstant(_ff)
MAX_RELEVANT_FACTS = _ff.MAX_RELEVANT_FACTS

_ff.MAX_PLAN_LENGTH_swigconstant(_ff)
MAX_PLAN_LENGTH = _ff.MAX_PLAN_LENGTH

_ff.INFINITY_swigconstant(_ff)
INFINITY = _ff.INFINITY

_ff.TRUE_swigconstant(_ff)
TRUE = _ff.TRUE

_ff.FALSE_swigconstant(_ff)
FALSE = _ff.FALSE
class _command_line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _command_line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _command_line, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _ff._command_line_path_set
    __swig_getmethods__["path"] = _ff._command_line_path_get
    if _newclass:
        path = _swig_property(_ff._command_line_path_get, _ff._command_line_path_set)
    __swig_setmethods__["ops_file_name"] = _ff._command_line_ops_file_name_set
    __swig_getmethods__["ops_file_name"] = _ff._command_line_ops_file_name_get
    if _newclass:
        ops_file_name = _swig_property(_ff._command_line_ops_file_name_get, _ff._command_line_ops_file_name_set)
    __swig_setmethods__["fct_file_name"] = _ff._command_line_fct_file_name_set
    __swig_getmethods__["fct_file_name"] = _ff._command_line_fct_file_name_get
    if _newclass:
        fct_file_name = _swig_property(_ff._command_line_fct_file_name_get, _ff._command_line_fct_file_name_set)
    __swig_setmethods__["display_info"] = _ff._command_line_display_info_set
    __swig_getmethods__["display_info"] = _ff._command_line_display_info_get
    if _newclass:
        display_info = _swig_property(_ff._command_line_display_info_get, _ff._command_line_display_info_set)
    __swig_setmethods__["debug"] = _ff._command_line_debug_set
    __swig_getmethods__["debug"] = _ff._command_line_debug_get
    if _newclass:
        debug = _swig_property(_ff._command_line_debug_get, _ff._command_line_debug_set)

    def __init__(self):
        this = _ff.new__command_line()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete__command_line
    __del__ = lambda self: None
_command_line_swigregister = _ff._command_line_swigregister
_command_line_swigregister(_command_line)

class TokenList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TokenList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TokenList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item"] = _ff.TokenList_item_set
    __swig_getmethods__["item"] = _ff.TokenList_item_get
    if _newclass:
        item = _swig_property(_ff.TokenList_item_get, _ff.TokenList_item_set)
    __swig_setmethods__["next"] = _ff.TokenList_next_set
    __swig_getmethods__["next"] = _ff.TokenList_next_get
    if _newclass:
        next = _swig_property(_ff.TokenList_next_get, _ff.TokenList_next_set)

    def __init__(self):
        this = _ff.new_TokenList()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_TokenList
    __del__ = lambda self: None
TokenList_swigregister = _ff.TokenList_swigregister
TokenList_swigregister(TokenList)

class FactList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FactList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FactList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item"] = _ff.FactList_item_set
    __swig_getmethods__["item"] = _ff.FactList_item_get
    if _newclass:
        item = _swig_property(_ff.FactList_item_get, _ff.FactList_item_set)
    __swig_setmethods__["next"] = _ff.FactList_next_set
    __swig_getmethods__["next"] = _ff.FactList_next_get
    if _newclass:
        next = _swig_property(_ff.FactList_next_get, _ff.FactList_next_set)

    def __init__(self):
        this = _ff.new_FactList()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_FactList
    __del__ = lambda self: None
FactList_swigregister = _ff.FactList_swigregister
FactList_swigregister(FactList)

class TypedList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _ff.TypedList_name_set
    __swig_getmethods__["name"] = _ff.TypedList_name_get
    if _newclass:
        name = _swig_property(_ff.TypedList_name_get, _ff.TypedList_name_set)
    __swig_setmethods__["type"] = _ff.TypedList_type_set
    __swig_getmethods__["type"] = _ff.TypedList_type_get
    if _newclass:
        type = _swig_property(_ff.TypedList_type_get, _ff.TypedList_type_set)
    __swig_setmethods__["n"] = _ff.TypedList_n_set
    __swig_getmethods__["n"] = _ff.TypedList_n_get
    if _newclass:
        n = _swig_property(_ff.TypedList_n_get, _ff.TypedList_n_set)
    __swig_setmethods__["next"] = _ff.TypedList_next_set
    __swig_getmethods__["next"] = _ff.TypedList_next_get
    if _newclass:
        next = _swig_property(_ff.TypedList_next_get, _ff.TypedList_next_set)

    def __init__(self):
        this = _ff.new_TypedList()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_TypedList
    __del__ = lambda self: None
TypedList_swigregister = _ff.TypedList_swigregister
TypedList_swigregister(TypedList)

class TypedListList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedListList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedListList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["predicate"] = _ff.TypedListList_predicate_set
    __swig_getmethods__["predicate"] = _ff.TypedListList_predicate_get
    if _newclass:
        predicate = _swig_property(_ff.TypedListList_predicate_get, _ff.TypedListList_predicate_set)
    __swig_setmethods__["args"] = _ff.TypedListList_args_set
    __swig_getmethods__["args"] = _ff.TypedListList_args_get
    if _newclass:
        args = _swig_property(_ff.TypedListList_args_get, _ff.TypedListList_args_set)
    __swig_setmethods__["next"] = _ff.TypedListList_next_set
    __swig_getmethods__["next"] = _ff.TypedListList_next_get
    if _newclass:
        next = _swig_property(_ff.TypedListList_next_get, _ff.TypedListList_next_set)

    def __init__(self):
        this = _ff.new_TypedListList()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_TypedListList
    __del__ = lambda self: None
TypedListList_swigregister = _ff.TypedListList_swigregister
TypedListList_swigregister(TypedListList)


_ff.TRU_swigconstant(_ff)
TRU = _ff.TRU

_ff.FAL_swigconstant(_ff)
FAL = _ff.FAL

_ff.ATOM_swigconstant(_ff)
ATOM = _ff.ATOM

_ff.NOT_swigconstant(_ff)
NOT = _ff.NOT

_ff.AND_swigconstant(_ff)
AND = _ff.AND

_ff.OR_swigconstant(_ff)
OR = _ff.OR

_ff.ALL_swigconstant(_ff)
ALL = _ff.ALL

_ff.EX_swigconstant(_ff)
EX = _ff.EX

_ff.WHEN_swigconstant(_ff)
WHEN = _ff.WHEN
class PlNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["connective"] = _ff.PlNode_connective_set
    __swig_getmethods__["connective"] = _ff.PlNode_connective_get
    if _newclass:
        connective = _swig_property(_ff.PlNode_connective_get, _ff.PlNode_connective_set)
    __swig_setmethods__["parse_vars"] = _ff.PlNode_parse_vars_set
    __swig_getmethods__["parse_vars"] = _ff.PlNode_parse_vars_get
    if _newclass:
        parse_vars = _swig_property(_ff.PlNode_parse_vars_get, _ff.PlNode_parse_vars_set)
    __swig_setmethods__["atom"] = _ff.PlNode_atom_set
    __swig_getmethods__["atom"] = _ff.PlNode_atom_get
    if _newclass:
        atom = _swig_property(_ff.PlNode_atom_get, _ff.PlNode_atom_set)
    __swig_setmethods__["sons"] = _ff.PlNode_sons_set
    __swig_getmethods__["sons"] = _ff.PlNode_sons_get
    if _newclass:
        sons = _swig_property(_ff.PlNode_sons_get, _ff.PlNode_sons_set)
    __swig_setmethods__["next"] = _ff.PlNode_next_set
    __swig_getmethods__["next"] = _ff.PlNode_next_get
    if _newclass:
        next = _swig_property(_ff.PlNode_next_get, _ff.PlNode_next_set)

    def __init__(self):
        this = _ff.new_PlNode()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_PlNode
    __del__ = lambda self: None
PlNode_swigregister = _ff.PlNode_swigregister
PlNode_swigregister(PlNode)

class PlOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlOperator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _ff.PlOperator_name_set
    __swig_getmethods__["name"] = _ff.PlOperator_name_get
    if _newclass:
        name = _swig_property(_ff.PlOperator_name_get, _ff.PlOperator_name_set)
    __swig_setmethods__["number_of_real_params"] = _ff.PlOperator_number_of_real_params_set
    __swig_getmethods__["number_of_real_params"] = _ff.PlOperator_number_of_real_params_get
    if _newclass:
        number_of_real_params = _swig_property(_ff.PlOperator_number_of_real_params_get, _ff.PlOperator_number_of_real_params_set)
    __swig_setmethods__["parse_params"] = _ff.PlOperator_parse_params_set
    __swig_getmethods__["parse_params"] = _ff.PlOperator_parse_params_get
    if _newclass:
        parse_params = _swig_property(_ff.PlOperator_parse_params_get, _ff.PlOperator_parse_params_set)
    __swig_setmethods__["params"] = _ff.PlOperator_params_set
    __swig_getmethods__["params"] = _ff.PlOperator_params_get
    if _newclass:
        params = _swig_property(_ff.PlOperator_params_get, _ff.PlOperator_params_set)
    __swig_setmethods__["preconds"] = _ff.PlOperator_preconds_set
    __swig_getmethods__["preconds"] = _ff.PlOperator_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.PlOperator_preconds_get, _ff.PlOperator_preconds_set)
    __swig_setmethods__["effects"] = _ff.PlOperator_effects_set
    __swig_getmethods__["effects"] = _ff.PlOperator_effects_get
    if _newclass:
        effects = _swig_property(_ff.PlOperator_effects_get, _ff.PlOperator_effects_set)
    __swig_setmethods__["next"] = _ff.PlOperator_next_set
    __swig_getmethods__["next"] = _ff.PlOperator_next_get
    if _newclass:
        next = _swig_property(_ff.PlOperator_next_get, _ff.PlOperator_next_set)

    def __init__(self):
        this = _ff.new_PlOperator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_PlOperator
    __del__ = lambda self: None
PlOperator_swigregister = _ff.PlOperator_swigregister
PlOperator_swigregister(PlOperator)

class Fact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fact, name)
    __repr__ = _swig_repr
    __swig_setmethods__["predicate"] = _ff.Fact_predicate_set
    __swig_getmethods__["predicate"] = _ff.Fact_predicate_get
    if _newclass:
        predicate = _swig_property(_ff.Fact_predicate_get, _ff.Fact_predicate_set)
    __swig_setmethods__["args"] = _ff.Fact_args_set
    __swig_getmethods__["args"] = _ff.Fact_args_get
    if _newclass:
        args = _swig_property(_ff.Fact_args_get, _ff.Fact_args_set)

    def __init__(self):
        this = _ff.new_Fact()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Fact
    __del__ = lambda self: None
Fact_swigregister = _ff.Fact_swigregister
Fact_swigregister(Fact)

class Facts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Facts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Facts, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fact"] = _ff.Facts_fact_set
    __swig_getmethods__["fact"] = _ff.Facts_fact_get
    if _newclass:
        fact = _swig_property(_ff.Facts_fact_get, _ff.Facts_fact_set)
    __swig_setmethods__["next"] = _ff.Facts_next_set
    __swig_getmethods__["next"] = _ff.Facts_next_get
    if _newclass:
        next = _swig_property(_ff.Facts_next_get, _ff.Facts_next_set)

    def __init__(self):
        this = _ff.new_Facts()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Facts
    __del__ = lambda self: None
Facts_swigregister = _ff.Facts_swigregister
Facts_swigregister(Facts)

class WffNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WffNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WffNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["connective"] = _ff.WffNode_connective_set
    __swig_getmethods__["connective"] = _ff.WffNode_connective_get
    if _newclass:
        connective = _swig_property(_ff.WffNode_connective_get, _ff.WffNode_connective_set)
    __swig_setmethods__["var"] = _ff.WffNode_var_set
    __swig_getmethods__["var"] = _ff.WffNode_var_get
    if _newclass:
        var = _swig_property(_ff.WffNode_var_get, _ff.WffNode_var_set)
    __swig_setmethods__["var_type"] = _ff.WffNode_var_type_set
    __swig_getmethods__["var_type"] = _ff.WffNode_var_type_get
    if _newclass:
        var_type = _swig_property(_ff.WffNode_var_type_get, _ff.WffNode_var_type_set)
    __swig_setmethods__["var_name"] = _ff.WffNode_var_name_set
    __swig_getmethods__["var_name"] = _ff.WffNode_var_name_get
    if _newclass:
        var_name = _swig_property(_ff.WffNode_var_name_get, _ff.WffNode_var_name_set)
    __swig_setmethods__["sons"] = _ff.WffNode_sons_set
    __swig_getmethods__["sons"] = _ff.WffNode_sons_get
    if _newclass:
        sons = _swig_property(_ff.WffNode_sons_get, _ff.WffNode_sons_set)
    __swig_setmethods__["next"] = _ff.WffNode_next_set
    __swig_getmethods__["next"] = _ff.WffNode_next_get
    if _newclass:
        next = _swig_property(_ff.WffNode_next_get, _ff.WffNode_next_set)
    __swig_setmethods__["prev"] = _ff.WffNode_prev_set
    __swig_getmethods__["prev"] = _ff.WffNode_prev_get
    if _newclass:
        prev = _swig_property(_ff.WffNode_prev_get, _ff.WffNode_prev_set)
    __swig_setmethods__["fact"] = _ff.WffNode_fact_set
    __swig_getmethods__["fact"] = _ff.WffNode_fact_get
    if _newclass:
        fact = _swig_property(_ff.WffNode_fact_get, _ff.WffNode_fact_set)
    __swig_setmethods__["NOT_p"] = _ff.WffNode_NOT_p_set
    __swig_getmethods__["NOT_p"] = _ff.WffNode_NOT_p_get
    if _newclass:
        NOT_p = _swig_property(_ff.WffNode_NOT_p_get, _ff.WffNode_NOT_p_set)
    __swig_setmethods__["son"] = _ff.WffNode_son_set
    __swig_getmethods__["son"] = _ff.WffNode_son_get
    if _newclass:
        son = _swig_property(_ff.WffNode_son_get, _ff.WffNode_son_set)
    __swig_setmethods__["visited"] = _ff.WffNode_visited_set
    __swig_getmethods__["visited"] = _ff.WffNode_visited_get
    if _newclass:
        visited = _swig_property(_ff.WffNode_visited_get, _ff.WffNode_visited_set)

    def __init__(self):
        this = _ff.new_WffNode()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_WffNode
    __del__ = lambda self: None
WffNode_swigregister = _ff.WffNode_swigregister
WffNode_swigregister(WffNode)

class Literal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Literal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Literal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["negated"] = _ff.Literal_negated_set
    __swig_getmethods__["negated"] = _ff.Literal_negated_get
    if _newclass:
        negated = _swig_property(_ff.Literal_negated_get, _ff.Literal_negated_set)
    __swig_setmethods__["fact"] = _ff.Literal_fact_set
    __swig_getmethods__["fact"] = _ff.Literal_fact_get
    if _newclass:
        fact = _swig_property(_ff.Literal_fact_get, _ff.Literal_fact_set)
    __swig_setmethods__["next"] = _ff.Literal_next_set
    __swig_getmethods__["next"] = _ff.Literal_next_get
    if _newclass:
        next = _swig_property(_ff.Literal_next_get, _ff.Literal_next_set)
    __swig_setmethods__["prev"] = _ff.Literal_prev_set
    __swig_getmethods__["prev"] = _ff.Literal_prev_get
    if _newclass:
        prev = _swig_property(_ff.Literal_prev_get, _ff.Literal_prev_set)

    def __init__(self):
        this = _ff.new_Literal()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Literal
    __del__ = lambda self: None
Literal_swigregister = _ff.Literal_swigregister
Literal_swigregister(Literal)

class Effect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Effect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Effect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_vars"] = _ff.Effect_num_vars_set
    __swig_getmethods__["num_vars"] = _ff.Effect_num_vars_get
    if _newclass:
        num_vars = _swig_property(_ff.Effect_num_vars_get, _ff.Effect_num_vars_set)
    __swig_setmethods__["var_types"] = _ff.Effect_var_types_set
    __swig_getmethods__["var_types"] = _ff.Effect_var_types_get
    if _newclass:
        var_types = _swig_property(_ff.Effect_var_types_get, _ff.Effect_var_types_set)
    __swig_setmethods__["var_names"] = _ff.Effect_var_names_set
    __swig_getmethods__["var_names"] = _ff.Effect_var_names_get
    if _newclass:
        var_names = _swig_property(_ff.Effect_var_names_get, _ff.Effect_var_names_set)
    __swig_setmethods__["conditions"] = _ff.Effect_conditions_set
    __swig_getmethods__["conditions"] = _ff.Effect_conditions_get
    if _newclass:
        conditions = _swig_property(_ff.Effect_conditions_get, _ff.Effect_conditions_set)
    __swig_setmethods__["effects"] = _ff.Effect_effects_set
    __swig_getmethods__["effects"] = _ff.Effect_effects_get
    if _newclass:
        effects = _swig_property(_ff.Effect_effects_get, _ff.Effect_effects_set)
    __swig_setmethods__["next"] = _ff.Effect_next_set
    __swig_getmethods__["next"] = _ff.Effect_next_get
    if _newclass:
        next = _swig_property(_ff.Effect_next_get, _ff.Effect_next_set)
    __swig_setmethods__["prev"] = _ff.Effect_prev_set
    __swig_getmethods__["prev"] = _ff.Effect_prev_get
    if _newclass:
        prev = _swig_property(_ff.Effect_prev_get, _ff.Effect_prev_set)

    def __init__(self):
        this = _ff.new_Effect()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Effect
    __del__ = lambda self: None
Effect_swigregister = _ff.Effect_swigregister
Effect_swigregister(Effect)

class Operator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _ff.Operator_name_set
    __swig_getmethods__["name"] = _ff.Operator_name_get
    if _newclass:
        name = _swig_property(_ff.Operator_name_get, _ff.Operator_name_set)
    __swig_setmethods__["var_names"] = _ff.Operator_var_names_set
    __swig_getmethods__["var_names"] = _ff.Operator_var_names_get
    if _newclass:
        var_names = _swig_property(_ff.Operator_var_names_get, _ff.Operator_var_names_set)
    __swig_setmethods__["number_of_real_params"] = _ff.Operator_number_of_real_params_set
    __swig_getmethods__["number_of_real_params"] = _ff.Operator_number_of_real_params_get
    if _newclass:
        number_of_real_params = _swig_property(_ff.Operator_number_of_real_params_get, _ff.Operator_number_of_real_params_set)
    __swig_setmethods__["num_vars"] = _ff.Operator_num_vars_set
    __swig_getmethods__["num_vars"] = _ff.Operator_num_vars_get
    if _newclass:
        num_vars = _swig_property(_ff.Operator_num_vars_get, _ff.Operator_num_vars_set)
    __swig_setmethods__["var_types"] = _ff.Operator_var_types_set
    __swig_getmethods__["var_types"] = _ff.Operator_var_types_get
    if _newclass:
        var_types = _swig_property(_ff.Operator_var_types_get, _ff.Operator_var_types_set)
    __swig_setmethods__["removed"] = _ff.Operator_removed_set
    __swig_getmethods__["removed"] = _ff.Operator_removed_get
    if _newclass:
        removed = _swig_property(_ff.Operator_removed_get, _ff.Operator_removed_set)
    __swig_setmethods__["preconds"] = _ff.Operator_preconds_set
    __swig_getmethods__["preconds"] = _ff.Operator_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.Operator_preconds_get, _ff.Operator_preconds_set)
    __swig_setmethods__["effects"] = _ff.Operator_effects_set
    __swig_getmethods__["effects"] = _ff.Operator_effects_get
    if _newclass:
        effects = _swig_property(_ff.Operator_effects_get, _ff.Operator_effects_set)
    __swig_setmethods__["hard"] = _ff.Operator_hard_set
    __swig_getmethods__["hard"] = _ff.Operator_hard_get
    if _newclass:
        hard = _swig_property(_ff.Operator_hard_get, _ff.Operator_hard_set)

    def __init__(self):
        this = _ff.new_Operator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Operator
    __del__ = lambda self: None
Operator_swigregister = _ff.Operator_swigregister
Operator_swigregister(Operator)

class NormEffect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormEffect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NormEffect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_vars"] = _ff.NormEffect_num_vars_set
    __swig_getmethods__["num_vars"] = _ff.NormEffect_num_vars_get
    if _newclass:
        num_vars = _swig_property(_ff.NormEffect_num_vars_get, _ff.NormEffect_num_vars_set)
    __swig_setmethods__["var_types"] = _ff.NormEffect_var_types_set
    __swig_getmethods__["var_types"] = _ff.NormEffect_var_types_get
    if _newclass:
        var_types = _swig_property(_ff.NormEffect_var_types_get, _ff.NormEffect_var_types_set)
    __swig_setmethods__["inst_table"] = _ff.NormEffect_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.NormEffect_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.NormEffect_inst_table_get, _ff.NormEffect_inst_table_set)
    __swig_setmethods__["conditions"] = _ff.NormEffect_conditions_set
    __swig_getmethods__["conditions"] = _ff.NormEffect_conditions_get
    if _newclass:
        conditions = _swig_property(_ff.NormEffect_conditions_get, _ff.NormEffect_conditions_set)
    __swig_setmethods__["num_conditions"] = _ff.NormEffect_num_conditions_set
    __swig_getmethods__["num_conditions"] = _ff.NormEffect_num_conditions_get
    if _newclass:
        num_conditions = _swig_property(_ff.NormEffect_num_conditions_get, _ff.NormEffect_num_conditions_set)
    __swig_setmethods__["adds"] = _ff.NormEffect_adds_set
    __swig_getmethods__["adds"] = _ff.NormEffect_adds_get
    if _newclass:
        adds = _swig_property(_ff.NormEffect_adds_get, _ff.NormEffect_adds_set)
    __swig_setmethods__["num_adds"] = _ff.NormEffect_num_adds_set
    __swig_getmethods__["num_adds"] = _ff.NormEffect_num_adds_get
    if _newclass:
        num_adds = _swig_property(_ff.NormEffect_num_adds_get, _ff.NormEffect_num_adds_set)
    __swig_setmethods__["dels"] = _ff.NormEffect_dels_set
    __swig_getmethods__["dels"] = _ff.NormEffect_dels_get
    if _newclass:
        dels = _swig_property(_ff.NormEffect_dels_get, _ff.NormEffect_dels_set)
    __swig_setmethods__["num_dels"] = _ff.NormEffect_num_dels_set
    __swig_getmethods__["num_dels"] = _ff.NormEffect_num_dels_get
    if _newclass:
        num_dels = _swig_property(_ff.NormEffect_num_dels_get, _ff.NormEffect_num_dels_set)
    __swig_setmethods__["prev"] = _ff.NormEffect_prev_set
    __swig_getmethods__["prev"] = _ff.NormEffect_prev_get
    if _newclass:
        prev = _swig_property(_ff.NormEffect_prev_get, _ff.NormEffect_prev_set)
    __swig_setmethods__["next"] = _ff.NormEffect_next_set
    __swig_getmethods__["next"] = _ff.NormEffect_next_get
    if _newclass:
        next = _swig_property(_ff.NormEffect_next_get, _ff.NormEffect_next_set)

    def __init__(self):
        this = _ff.new_NormEffect()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_NormEffect
    __del__ = lambda self: None
NormEffect_swigregister = _ff.NormEffect_swigregister
NormEffect_swigregister(NormEffect)

class NormOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NormOperator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operator"] = _ff.NormOperator_operator_set
    __swig_getmethods__["operator"] = _ff.NormOperator_operator_get
    if _newclass:
        operator = _swig_property(_ff.NormOperator_operator_get, _ff.NormOperator_operator_set)
    __swig_setmethods__["num_vars"] = _ff.NormOperator_num_vars_set
    __swig_getmethods__["num_vars"] = _ff.NormOperator_num_vars_get
    if _newclass:
        num_vars = _swig_property(_ff.NormOperator_num_vars_get, _ff.NormOperator_num_vars_set)
    __swig_setmethods__["var_types"] = _ff.NormOperator_var_types_set
    __swig_getmethods__["var_types"] = _ff.NormOperator_var_types_get
    if _newclass:
        var_types = _swig_property(_ff.NormOperator_var_types_get, _ff.NormOperator_var_types_set)
    __swig_setmethods__["inst_table"] = _ff.NormOperator_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.NormOperator_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.NormOperator_inst_table_get, _ff.NormOperator_inst_table_set)
    __swig_setmethods__["removed_vars"] = _ff.NormOperator_removed_vars_set
    __swig_getmethods__["removed_vars"] = _ff.NormOperator_removed_vars_get
    if _newclass:
        removed_vars = _swig_property(_ff.NormOperator_removed_vars_get, _ff.NormOperator_removed_vars_set)
    __swig_setmethods__["num_removed_vars"] = _ff.NormOperator_num_removed_vars_set
    __swig_getmethods__["num_removed_vars"] = _ff.NormOperator_num_removed_vars_get
    if _newclass:
        num_removed_vars = _swig_property(_ff.NormOperator_num_removed_vars_get, _ff.NormOperator_num_removed_vars_set)
    __swig_setmethods__["type_removed_vars"] = _ff.NormOperator_type_removed_vars_set
    __swig_getmethods__["type_removed_vars"] = _ff.NormOperator_type_removed_vars_get
    if _newclass:
        type_removed_vars = _swig_property(_ff.NormOperator_type_removed_vars_get, _ff.NormOperator_type_removed_vars_set)
    __swig_setmethods__["preconds"] = _ff.NormOperator_preconds_set
    __swig_getmethods__["preconds"] = _ff.NormOperator_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.NormOperator_preconds_get, _ff.NormOperator_preconds_set)
    __swig_setmethods__["num_preconds"] = _ff.NormOperator_num_preconds_set
    __swig_getmethods__["num_preconds"] = _ff.NormOperator_num_preconds_get
    if _newclass:
        num_preconds = _swig_property(_ff.NormOperator_num_preconds_get, _ff.NormOperator_num_preconds_set)
    __swig_setmethods__["effects"] = _ff.NormOperator_effects_set
    __swig_getmethods__["effects"] = _ff.NormOperator_effects_get
    if _newclass:
        effects = _swig_property(_ff.NormOperator_effects_get, _ff.NormOperator_effects_set)
    __swig_setmethods__["out"] = _ff.NormOperator_out_set
    __swig_getmethods__["out"] = _ff.NormOperator_out_get
    if _newclass:
        out = _swig_property(_ff.NormOperator_out_get, _ff.NormOperator_out_set)

    def __init__(self):
        this = _ff.new_NormOperator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_NormOperator
    __del__ = lambda self: None
NormOperator_swigregister = _ff.NormOperator_swigregister
NormOperator_swigregister(NormOperator)

class EasyTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EasyTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EasyTemplate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["op"] = _ff.EasyTemplate_op_set
    __swig_getmethods__["op"] = _ff.EasyTemplate_op_get
    if _newclass:
        op = _swig_property(_ff.EasyTemplate_op_get, _ff.EasyTemplate_op_set)
    __swig_setmethods__["inst_table"] = _ff.EasyTemplate_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.EasyTemplate_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.EasyTemplate_inst_table_get, _ff.EasyTemplate_inst_table_set)
    __swig_setmethods__["prev"] = _ff.EasyTemplate_prev_set
    __swig_getmethods__["prev"] = _ff.EasyTemplate_prev_get
    if _newclass:
        prev = _swig_property(_ff.EasyTemplate_prev_get, _ff.EasyTemplate_prev_set)
    __swig_setmethods__["next"] = _ff.EasyTemplate_next_set
    __swig_getmethods__["next"] = _ff.EasyTemplate_next_get
    if _newclass:
        next = _swig_property(_ff.EasyTemplate_next_get, _ff.EasyTemplate_next_set)

    def __init__(self):
        this = _ff.new_EasyTemplate()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_EasyTemplate
    __del__ = lambda self: None
EasyTemplate_swigregister = _ff.EasyTemplate_swigregister
EasyTemplate_swigregister(EasyTemplate)

class MixedOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MixedOperator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operator"] = _ff.MixedOperator_operator_set
    __swig_getmethods__["operator"] = _ff.MixedOperator_operator_get
    if _newclass:
        operator = _swig_property(_ff.MixedOperator_operator_get, _ff.MixedOperator_operator_set)
    __swig_setmethods__["inst_table"] = _ff.MixedOperator_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.MixedOperator_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.MixedOperator_inst_table_get, _ff.MixedOperator_inst_table_set)
    __swig_setmethods__["preconds"] = _ff.MixedOperator_preconds_set
    __swig_getmethods__["preconds"] = _ff.MixedOperator_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.MixedOperator_preconds_get, _ff.MixedOperator_preconds_set)
    __swig_setmethods__["num_preconds"] = _ff.MixedOperator_num_preconds_set
    __swig_getmethods__["num_preconds"] = _ff.MixedOperator_num_preconds_get
    if _newclass:
        num_preconds = _swig_property(_ff.MixedOperator_num_preconds_get, _ff.MixedOperator_num_preconds_set)
    __swig_setmethods__["effects"] = _ff.MixedOperator_effects_set
    __swig_getmethods__["effects"] = _ff.MixedOperator_effects_get
    if _newclass:
        effects = _swig_property(_ff.MixedOperator_effects_get, _ff.MixedOperator_effects_set)
    __swig_setmethods__["next"] = _ff.MixedOperator_next_set
    __swig_getmethods__["next"] = _ff.MixedOperator_next_get
    if _newclass:
        next = _swig_property(_ff.MixedOperator_next_get, _ff.MixedOperator_next_set)

    def __init__(self):
        this = _ff.new_MixedOperator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_MixedOperator
    __del__ = lambda self: None
MixedOperator_swigregister = _ff.MixedOperator_swigregister
MixedOperator_swigregister(MixedOperator)

class PseudoActionEffect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoActionEffect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoActionEffect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["conditions"] = _ff.PseudoActionEffect_conditions_set
    __swig_getmethods__["conditions"] = _ff.PseudoActionEffect_conditions_get
    if _newclass:
        conditions = _swig_property(_ff.PseudoActionEffect_conditions_get, _ff.PseudoActionEffect_conditions_set)
    __swig_setmethods__["num_conditions"] = _ff.PseudoActionEffect_num_conditions_set
    __swig_getmethods__["num_conditions"] = _ff.PseudoActionEffect_num_conditions_get
    if _newclass:
        num_conditions = _swig_property(_ff.PseudoActionEffect_num_conditions_get, _ff.PseudoActionEffect_num_conditions_set)
    __swig_setmethods__["adds"] = _ff.PseudoActionEffect_adds_set
    __swig_getmethods__["adds"] = _ff.PseudoActionEffect_adds_get
    if _newclass:
        adds = _swig_property(_ff.PseudoActionEffect_adds_get, _ff.PseudoActionEffect_adds_set)
    __swig_setmethods__["num_adds"] = _ff.PseudoActionEffect_num_adds_set
    __swig_getmethods__["num_adds"] = _ff.PseudoActionEffect_num_adds_get
    if _newclass:
        num_adds = _swig_property(_ff.PseudoActionEffect_num_adds_get, _ff.PseudoActionEffect_num_adds_set)
    __swig_setmethods__["dels"] = _ff.PseudoActionEffect_dels_set
    __swig_getmethods__["dels"] = _ff.PseudoActionEffect_dels_get
    if _newclass:
        dels = _swig_property(_ff.PseudoActionEffect_dels_get, _ff.PseudoActionEffect_dels_set)
    __swig_setmethods__["num_dels"] = _ff.PseudoActionEffect_num_dels_set
    __swig_getmethods__["num_dels"] = _ff.PseudoActionEffect_num_dels_get
    if _newclass:
        num_dels = _swig_property(_ff.PseudoActionEffect_num_dels_get, _ff.PseudoActionEffect_num_dels_set)
    __swig_setmethods__["next"] = _ff.PseudoActionEffect_next_set
    __swig_getmethods__["next"] = _ff.PseudoActionEffect_next_get
    if _newclass:
        next = _swig_property(_ff.PseudoActionEffect_next_get, _ff.PseudoActionEffect_next_set)

    def __init__(self):
        this = _ff.new_PseudoActionEffect()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_PseudoActionEffect
    __del__ = lambda self: None
PseudoActionEffect_swigregister = _ff.PseudoActionEffect_swigregister
PseudoActionEffect_swigregister(PseudoActionEffect)

class PseudoAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoAction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operator"] = _ff.PseudoAction_operator_set
    __swig_getmethods__["operator"] = _ff.PseudoAction_operator_get
    if _newclass:
        operator = _swig_property(_ff.PseudoAction_operator_get, _ff.PseudoAction_operator_set)
    __swig_setmethods__["inst_table"] = _ff.PseudoAction_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.PseudoAction_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.PseudoAction_inst_table_get, _ff.PseudoAction_inst_table_set)
    __swig_setmethods__["preconds"] = _ff.PseudoAction_preconds_set
    __swig_getmethods__["preconds"] = _ff.PseudoAction_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.PseudoAction_preconds_get, _ff.PseudoAction_preconds_set)
    __swig_setmethods__["num_preconds"] = _ff.PseudoAction_num_preconds_set
    __swig_getmethods__["num_preconds"] = _ff.PseudoAction_num_preconds_get
    if _newclass:
        num_preconds = _swig_property(_ff.PseudoAction_num_preconds_get, _ff.PseudoAction_num_preconds_set)
    __swig_setmethods__["effects"] = _ff.PseudoAction_effects_set
    __swig_getmethods__["effects"] = _ff.PseudoAction_effects_get
    if _newclass:
        effects = _swig_property(_ff.PseudoAction_effects_get, _ff.PseudoAction_effects_set)
    __swig_setmethods__["num_effects"] = _ff.PseudoAction_num_effects_set
    __swig_getmethods__["num_effects"] = _ff.PseudoAction_num_effects_get
    if _newclass:
        num_effects = _swig_property(_ff.PseudoAction_num_effects_get, _ff.PseudoAction_num_effects_set)

    def __init__(self):
        this = _ff.new_PseudoAction()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_PseudoAction
    __del__ = lambda self: None
PseudoAction_swigregister = _ff.PseudoAction_swigregister
PseudoAction_swigregister(PseudoAction)

class ActionEffect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionEffect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionEffect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["conditions"] = _ff.ActionEffect_conditions_set
    __swig_getmethods__["conditions"] = _ff.ActionEffect_conditions_get
    if _newclass:
        conditions = _swig_property(_ff.ActionEffect_conditions_get, _ff.ActionEffect_conditions_set)
    __swig_setmethods__["num_conditions"] = _ff.ActionEffect_num_conditions_set
    __swig_getmethods__["num_conditions"] = _ff.ActionEffect_num_conditions_get
    if _newclass:
        num_conditions = _swig_property(_ff.ActionEffect_num_conditions_get, _ff.ActionEffect_num_conditions_set)
    __swig_setmethods__["adds"] = _ff.ActionEffect_adds_set
    __swig_getmethods__["adds"] = _ff.ActionEffect_adds_get
    if _newclass:
        adds = _swig_property(_ff.ActionEffect_adds_get, _ff.ActionEffect_adds_set)
    __swig_setmethods__["num_adds"] = _ff.ActionEffect_num_adds_set
    __swig_getmethods__["num_adds"] = _ff.ActionEffect_num_adds_get
    if _newclass:
        num_adds = _swig_property(_ff.ActionEffect_num_adds_get, _ff.ActionEffect_num_adds_set)
    __swig_setmethods__["dels"] = _ff.ActionEffect_dels_set
    __swig_getmethods__["dels"] = _ff.ActionEffect_dels_get
    if _newclass:
        dels = _swig_property(_ff.ActionEffect_dels_get, _ff.ActionEffect_dels_set)
    __swig_setmethods__["num_dels"] = _ff.ActionEffect_num_dels_set
    __swig_getmethods__["num_dels"] = _ff.ActionEffect_num_dels_get
    if _newclass:
        num_dels = _swig_property(_ff.ActionEffect_num_dels_get, _ff.ActionEffect_num_dels_set)

    def __init__(self):
        this = _ff.new_ActionEffect()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_ActionEffect
    __del__ = lambda self: None
ActionEffect_swigregister = _ff.ActionEffect_swigregister
ActionEffect_swigregister(ActionEffect)

class Action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    __swig_setmethods__["norm_operator"] = _ff.Action_norm_operator_set
    __swig_getmethods__["norm_operator"] = _ff.Action_norm_operator_get
    if _newclass:
        norm_operator = _swig_property(_ff.Action_norm_operator_get, _ff.Action_norm_operator_set)
    __swig_setmethods__["pseudo_action"] = _ff.Action_pseudo_action_set
    __swig_getmethods__["pseudo_action"] = _ff.Action_pseudo_action_get
    if _newclass:
        pseudo_action = _swig_property(_ff.Action_pseudo_action_get, _ff.Action_pseudo_action_set)
    __swig_setmethods__["name"] = _ff.Action_name_set
    __swig_getmethods__["name"] = _ff.Action_name_get
    if _newclass:
        name = _swig_property(_ff.Action_name_get, _ff.Action_name_set)
    __swig_setmethods__["num_name_vars"] = _ff.Action_num_name_vars_set
    __swig_getmethods__["num_name_vars"] = _ff.Action_num_name_vars_get
    if _newclass:
        num_name_vars = _swig_property(_ff.Action_num_name_vars_get, _ff.Action_num_name_vars_set)
    __swig_setmethods__["name_inst_table"] = _ff.Action_name_inst_table_set
    __swig_getmethods__["name_inst_table"] = _ff.Action_name_inst_table_get
    if _newclass:
        name_inst_table = _swig_property(_ff.Action_name_inst_table_get, _ff.Action_name_inst_table_set)
    __swig_setmethods__["inst_table"] = _ff.Action_inst_table_set
    __swig_getmethods__["inst_table"] = _ff.Action_inst_table_get
    if _newclass:
        inst_table = _swig_property(_ff.Action_inst_table_get, _ff.Action_inst_table_set)
    __swig_setmethods__["preconds"] = _ff.Action_preconds_set
    __swig_getmethods__["preconds"] = _ff.Action_preconds_get
    if _newclass:
        preconds = _swig_property(_ff.Action_preconds_get, _ff.Action_preconds_set)
    __swig_setmethods__["num_preconds"] = _ff.Action_num_preconds_set
    __swig_getmethods__["num_preconds"] = _ff.Action_num_preconds_get
    if _newclass:
        num_preconds = _swig_property(_ff.Action_num_preconds_get, _ff.Action_num_preconds_set)
    __swig_setmethods__["effects"] = _ff.Action_effects_set
    __swig_getmethods__["effects"] = _ff.Action_effects_get
    if _newclass:
        effects = _swig_property(_ff.Action_effects_get, _ff.Action_effects_set)
    __swig_setmethods__["num_effects"] = _ff.Action_num_effects_set
    __swig_getmethods__["num_effects"] = _ff.Action_num_effects_get
    if _newclass:
        num_effects = _swig_property(_ff.Action_num_effects_get, _ff.Action_num_effects_set)
    __swig_setmethods__["next"] = _ff.Action_next_set
    __swig_getmethods__["next"] = _ff.Action_next_get
    if _newclass:
        next = _swig_property(_ff.Action_next_get, _ff.Action_next_set)

    def __init__(self):
        this = _ff.new_Action()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_Action
    __del__ = lambda self: None
Action_swigregister = _ff.Action_swigregister
Action_swigregister(Action)

class OpConn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpConn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpConn, name)
    __repr__ = _swig_repr
    __swig_setmethods__["action"] = _ff.OpConn_action_set
    __swig_getmethods__["action"] = _ff.OpConn_action_get
    if _newclass:
        action = _swig_property(_ff.OpConn_action_get, _ff.OpConn_action_set)
    __swig_setmethods__["E"] = _ff.OpConn_E_set
    __swig_getmethods__["E"] = _ff.OpConn_E_get
    if _newclass:
        E = _swig_property(_ff.OpConn_E_get, _ff.OpConn_E_set)
    __swig_setmethods__["num_E"] = _ff.OpConn_num_E_set
    __swig_getmethods__["num_E"] = _ff.OpConn_num_E_get
    if _newclass:
        num_E = _swig_property(_ff.OpConn_num_E_get, _ff.OpConn_num_E_set)
    __swig_setmethods__["is_in_A"] = _ff.OpConn_is_in_A_set
    __swig_getmethods__["is_in_A"] = _ff.OpConn_is_in_A_get
    if _newclass:
        is_in_A = _swig_property(_ff.OpConn_is_in_A_get, _ff.OpConn_is_in_A_set)
    __swig_setmethods__["is_used"] = _ff.OpConn_is_used_set
    __swig_getmethods__["is_used"] = _ff.OpConn_is_used_get
    if _newclass:
        is_used = _swig_property(_ff.OpConn_is_used_get, _ff.OpConn_is_used_set)
    __swig_setmethods__["is_in_H"] = _ff.OpConn_is_in_H_set
    __swig_getmethods__["is_in_H"] = _ff.OpConn_is_in_H_get
    if _newclass:
        is_in_H = _swig_property(_ff.OpConn_is_in_H_get, _ff.OpConn_is_in_H_set)

    def __init__(self):
        this = _ff.new_OpConn()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_OpConn
    __del__ = lambda self: None
OpConn_swigregister = _ff.OpConn_swigregister
OpConn_swigregister(OpConn)

class EfConn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EfConn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EfConn, name)
    __repr__ = _swig_repr
    __swig_setmethods__["op"] = _ff.EfConn_op_set
    __swig_getmethods__["op"] = _ff.EfConn_op_get
    if _newclass:
        op = _swig_property(_ff.EfConn_op_get, _ff.EfConn_op_set)
    __swig_setmethods__["PC"] = _ff.EfConn_PC_set
    __swig_getmethods__["PC"] = _ff.EfConn_PC_get
    if _newclass:
        PC = _swig_property(_ff.EfConn_PC_get, _ff.EfConn_PC_set)
    __swig_setmethods__["num_PC"] = _ff.EfConn_num_PC_set
    __swig_getmethods__["num_PC"] = _ff.EfConn_num_PC_get
    if _newclass:
        num_PC = _swig_property(_ff.EfConn_num_PC_get, _ff.EfConn_num_PC_set)
    __swig_setmethods__["A"] = _ff.EfConn_A_set
    __swig_getmethods__["A"] = _ff.EfConn_A_get
    if _newclass:
        A = _swig_property(_ff.EfConn_A_get, _ff.EfConn_A_set)
    __swig_setmethods__["num_A"] = _ff.EfConn_num_A_set
    __swig_getmethods__["num_A"] = _ff.EfConn_num_A_get
    if _newclass:
        num_A = _swig_property(_ff.EfConn_num_A_get, _ff.EfConn_num_A_set)
    __swig_setmethods__["D"] = _ff.EfConn_D_set
    __swig_getmethods__["D"] = _ff.EfConn_D_get
    if _newclass:
        D = _swig_property(_ff.EfConn_D_get, _ff.EfConn_D_set)
    __swig_setmethods__["num_D"] = _ff.EfConn_num_D_set
    __swig_getmethods__["num_D"] = _ff.EfConn_num_D_get
    if _newclass:
        num_D = _swig_property(_ff.EfConn_num_D_get, _ff.EfConn_num_D_set)
    __swig_setmethods__["I"] = _ff.EfConn_I_set
    __swig_getmethods__["I"] = _ff.EfConn_I_get
    if _newclass:
        I = _swig_property(_ff.EfConn_I_get, _ff.EfConn_I_set)
    __swig_setmethods__["num_I"] = _ff.EfConn_num_I_set
    __swig_getmethods__["num_I"] = _ff.EfConn_num_I_get
    if _newclass:
        num_I = _swig_property(_ff.EfConn_num_I_get, _ff.EfConn_num_I_set)
    __swig_setmethods__["removed"] = _ff.EfConn_removed_set
    __swig_getmethods__["removed"] = _ff.EfConn_removed_get
    if _newclass:
        removed = _swig_property(_ff.EfConn_removed_get, _ff.EfConn_removed_set)
    __swig_setmethods__["level"] = _ff.EfConn_level_set
    __swig_getmethods__["level"] = _ff.EfConn_level_get
    if _newclass:
        level = _swig_property(_ff.EfConn_level_get, _ff.EfConn_level_set)
    __swig_setmethods__["in_E"] = _ff.EfConn_in_E_set
    __swig_getmethods__["in_E"] = _ff.EfConn_in_E_get
    if _newclass:
        in_E = _swig_property(_ff.EfConn_in_E_get, _ff.EfConn_in_E_set)
    __swig_setmethods__["num_active_PCs"] = _ff.EfConn_num_active_PCs_set
    __swig_getmethods__["num_active_PCs"] = _ff.EfConn_num_active_PCs_get
    if _newclass:
        num_active_PCs = _swig_property(_ff.EfConn_num_active_PCs_get, _ff.EfConn_num_active_PCs_set)
    __swig_setmethods__["ch"] = _ff.EfConn_ch_set
    __swig_getmethods__["ch"] = _ff.EfConn_ch_get
    if _newclass:
        ch = _swig_property(_ff.EfConn_ch_get, _ff.EfConn_ch_set)
    __swig_setmethods__["in_plan"] = _ff.EfConn_in_plan_set
    __swig_getmethods__["in_plan"] = _ff.EfConn_in_plan_get
    if _newclass:
        in_plan = _swig_property(_ff.EfConn_in_plan_get, _ff.EfConn_in_plan_set)

    def __init__(self):
        this = _ff.new_EfConn()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_EfConn
    __del__ = lambda self: None
EfConn_swigregister = _ff.EfConn_swigregister
EfConn_swigregister(EfConn)

class FtConn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FtConn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FtConn, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PC"] = _ff.FtConn_PC_set
    __swig_getmethods__["PC"] = _ff.FtConn_PC_get
    if _newclass:
        PC = _swig_property(_ff.FtConn_PC_get, _ff.FtConn_PC_set)
    __swig_setmethods__["num_PC"] = _ff.FtConn_num_PC_set
    __swig_getmethods__["num_PC"] = _ff.FtConn_num_PC_get
    if _newclass:
        num_PC = _swig_property(_ff.FtConn_num_PC_get, _ff.FtConn_num_PC_set)
    __swig_setmethods__["A"] = _ff.FtConn_A_set
    __swig_getmethods__["A"] = _ff.FtConn_A_get
    if _newclass:
        A = _swig_property(_ff.FtConn_A_get, _ff.FtConn_A_set)
    __swig_setmethods__["num_A"] = _ff.FtConn_num_A_set
    __swig_getmethods__["num_A"] = _ff.FtConn_num_A_get
    if _newclass:
        num_A = _swig_property(_ff.FtConn_num_A_get, _ff.FtConn_num_A_set)
    __swig_setmethods__["D"] = _ff.FtConn_D_set
    __swig_getmethods__["D"] = _ff.FtConn_D_get
    if _newclass:
        D = _swig_property(_ff.FtConn_D_get, _ff.FtConn_D_set)
    __swig_setmethods__["num_D"] = _ff.FtConn_num_D_set
    __swig_getmethods__["num_D"] = _ff.FtConn_num_D_get
    if _newclass:
        num_D = _swig_property(_ff.FtConn_num_D_get, _ff.FtConn_num_D_set)
    __swig_setmethods__["False"] = _ff.FtConn_False_set
    __swig_getmethods__["False"] = _ff.FtConn_False_get
    if _newclass:
        False = _swig_property(_ff.FtConn_False_get, _ff.FtConn_False_set)
    __swig_setmethods__["num_False"] = _ff.FtConn_num_False_set
    __swig_getmethods__["num_False"] = _ff.FtConn_num_False_get
    if _newclass:
        num_False = _swig_property(_ff.FtConn_num_False_get, _ff.FtConn_num_False_set)
    __swig_setmethods__["level"] = _ff.FtConn_level_set
    __swig_getmethods__["level"] = _ff.FtConn_level_get
    if _newclass:
        level = _swig_property(_ff.FtConn_level_get, _ff.FtConn_level_set)
    __swig_setmethods__["in_F"] = _ff.FtConn_in_F_set
    __swig_getmethods__["in_F"] = _ff.FtConn_in_F_get
    if _newclass:
        in_F = _swig_property(_ff.FtConn_in_F_get, _ff.FtConn_in_F_set)
    __swig_setmethods__["is_goal"] = _ff.FtConn_is_goal_set
    __swig_getmethods__["is_goal"] = _ff.FtConn_is_goal_get
    if _newclass:
        is_goal = _swig_property(_ff.FtConn_is_goal_get, _ff.FtConn_is_goal_set)
    __swig_setmethods__["is_true"] = _ff.FtConn_is_true_set
    __swig_getmethods__["is_true"] = _ff.FtConn_is_true_get
    if _newclass:
        is_true = _swig_property(_ff.FtConn_is_true_get, _ff.FtConn_is_true_set)
    __swig_setmethods__["ch"] = _ff.FtConn_ch_set
    __swig_getmethods__["ch"] = _ff.FtConn_ch_get
    if _newclass:
        ch = _swig_property(_ff.FtConn_ch_get, _ff.FtConn_ch_set)
    __swig_setmethods__["rand"] = _ff.FtConn_rand_set
    __swig_getmethods__["rand"] = _ff.FtConn_rand_get
    if _newclass:
        rand = _swig_property(_ff.FtConn_rand_get, _ff.FtConn_rand_set)
    __swig_setmethods__["is_global_goal"] = _ff.FtConn_is_global_goal_set
    __swig_getmethods__["is_global_goal"] = _ff.FtConn_is_global_goal_get
    if _newclass:
        is_global_goal = _swig_property(_ff.FtConn_is_global_goal_get, _ff.FtConn_is_global_goal_set)

    def __init__(self):
        this = _ff.new_FtConn()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_FtConn
    __del__ = lambda self: None
FtConn_swigregister = _ff.FtConn_swigregister
FtConn_swigregister(FtConn)

class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["F"] = _ff.State_F_set
    __swig_getmethods__["F"] = _ff.State_F_get
    if _newclass:
        F = _swig_property(_ff.State_F_get, _ff.State_F_set)
    __swig_setmethods__["num_F"] = _ff.State_num_F_set
    __swig_getmethods__["num_F"] = _ff.State_num_F_get
    if _newclass:
        num_F = _swig_property(_ff.State_num_F_get, _ff.State_num_F_set)
    __swig_setmethods__["max_F"] = _ff.State_max_F_set
    __swig_getmethods__["max_F"] = _ff.State_max_F_get
    if _newclass:
        max_F = _swig_property(_ff.State_max_F_get, _ff.State_max_F_set)

    def __init__(self):
        this = _ff.new_State()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_State
    __del__ = lambda self: None
State_swigregister = _ff.State_swigregister
State_swigregister(State)

class EhcNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EhcNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EhcNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["S"] = _ff.EhcNode_S_set
    __swig_getmethods__["S"] = _ff.EhcNode_S_get
    if _newclass:
        S = _swig_property(_ff.EhcNode_S_get, _ff.EhcNode_S_set)
    __swig_setmethods__["op"] = _ff.EhcNode_op_set
    __swig_getmethods__["op"] = _ff.EhcNode_op_get
    if _newclass:
        op = _swig_property(_ff.EhcNode_op_get, _ff.EhcNode_op_set)
    __swig_setmethods__["depth"] = _ff.EhcNode_depth_set
    __swig_getmethods__["depth"] = _ff.EhcNode_depth_get
    if _newclass:
        depth = _swig_property(_ff.EhcNode_depth_get, _ff.EhcNode_depth_set)
    __swig_setmethods__["father"] = _ff.EhcNode_father_set
    __swig_getmethods__["father"] = _ff.EhcNode_father_get
    if _newclass:
        father = _swig_property(_ff.EhcNode_father_get, _ff.EhcNode_father_set)
    __swig_setmethods__["next"] = _ff.EhcNode_next_set
    __swig_getmethods__["next"] = _ff.EhcNode_next_get
    if _newclass:
        next = _swig_property(_ff.EhcNode_next_get, _ff.EhcNode_next_set)
    __swig_setmethods__["new_goal"] = _ff.EhcNode_new_goal_set
    __swig_getmethods__["new_goal"] = _ff.EhcNode_new_goal_get
    if _newclass:
        new_goal = _swig_property(_ff.EhcNode_new_goal_get, _ff.EhcNode_new_goal_set)

    def __init__(self):
        this = _ff.new_EhcNode()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_EhcNode
    __del__ = lambda self: None
EhcNode_swigregister = _ff.EhcNode_swigregister
EhcNode_swigregister(EhcNode)

class EhcHashEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EhcHashEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EhcHashEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sum"] = _ff.EhcHashEntry_sum_set
    __swig_getmethods__["sum"] = _ff.EhcHashEntry_sum_get
    if _newclass:
        sum = _swig_property(_ff.EhcHashEntry_sum_get, _ff.EhcHashEntry_sum_set)
    __swig_setmethods__["ehc_node"] = _ff.EhcHashEntry_ehc_node_set
    __swig_getmethods__["ehc_node"] = _ff.EhcHashEntry_ehc_node_get
    if _newclass:
        ehc_node = _swig_property(_ff.EhcHashEntry_ehc_node_get, _ff.EhcHashEntry_ehc_node_set)
    __swig_setmethods__["next"] = _ff.EhcHashEntry_next_set
    __swig_getmethods__["next"] = _ff.EhcHashEntry_next_get
    if _newclass:
        next = _swig_property(_ff.EhcHashEntry_next_get, _ff.EhcHashEntry_next_set)

    def __init__(self):
        this = _ff.new_EhcHashEntry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_EhcHashEntry
    __del__ = lambda self: None
EhcHashEntry_swigregister = _ff.EhcHashEntry_swigregister
EhcHashEntry_swigregister(EhcHashEntry)

class PlanHashEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlanHashEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlanHashEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sum"] = _ff.PlanHashEntry_sum_set
    __swig_getmethods__["sum"] = _ff.PlanHashEntry_sum_get
    if _newclass:
        sum = _swig_property(_ff.PlanHashEntry_sum_get, _ff.PlanHashEntry_sum_set)
    __swig_setmethods__["S"] = _ff.PlanHashEntry_S_set
    __swig_getmethods__["S"] = _ff.PlanHashEntry_S_get
    if _newclass:
        S = _swig_property(_ff.PlanHashEntry_S_get, _ff.PlanHashEntry_S_set)
    __swig_setmethods__["step"] = _ff.PlanHashEntry_step_set
    __swig_getmethods__["step"] = _ff.PlanHashEntry_step_get
    if _newclass:
        step = _swig_property(_ff.PlanHashEntry_step_get, _ff.PlanHashEntry_step_set)
    __swig_setmethods__["next_step"] = _ff.PlanHashEntry_next_step_set
    __swig_getmethods__["next_step"] = _ff.PlanHashEntry_next_step_get
    if _newclass:
        next_step = _swig_property(_ff.PlanHashEntry_next_step_get, _ff.PlanHashEntry_next_step_set)
    __swig_setmethods__["next"] = _ff.PlanHashEntry_next_set
    __swig_getmethods__["next"] = _ff.PlanHashEntry_next_get
    if _newclass:
        next = _swig_property(_ff.PlanHashEntry_next_get, _ff.PlanHashEntry_next_set)

    def __init__(self):
        this = _ff.new_PlanHashEntry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_PlanHashEntry
    __del__ = lambda self: None
PlanHashEntry_swigregister = _ff.PlanHashEntry_swigregister
PlanHashEntry_swigregister(PlanHashEntry)

class BfsNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BfsNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BfsNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["S"] = _ff.BfsNode_S_set
    __swig_getmethods__["S"] = _ff.BfsNode_S_get
    if _newclass:
        S = _swig_property(_ff.BfsNode_S_get, _ff.BfsNode_S_set)
    __swig_setmethods__["op"] = _ff.BfsNode_op_set
    __swig_getmethods__["op"] = _ff.BfsNode_op_get
    if _newclass:
        op = _swig_property(_ff.BfsNode_op_get, _ff.BfsNode_op_set)
    __swig_setmethods__["h"] = _ff.BfsNode_h_set
    __swig_getmethods__["h"] = _ff.BfsNode_h_get
    if _newclass:
        h = _swig_property(_ff.BfsNode_h_get, _ff.BfsNode_h_set)
    __swig_setmethods__["father"] = _ff.BfsNode_father_set
    __swig_getmethods__["father"] = _ff.BfsNode_father_get
    if _newclass:
        father = _swig_property(_ff.BfsNode_father_get, _ff.BfsNode_father_set)
    __swig_setmethods__["next"] = _ff.BfsNode_next_set
    __swig_getmethods__["next"] = _ff.BfsNode_next_get
    if _newclass:
        next = _swig_property(_ff.BfsNode_next_get, _ff.BfsNode_next_set)
    __swig_setmethods__["prev"] = _ff.BfsNode_prev_set
    __swig_getmethods__["prev"] = _ff.BfsNode_prev_get
    if _newclass:
        prev = _swig_property(_ff.BfsNode_prev_get, _ff.BfsNode_prev_set)

    def __init__(self):
        this = _ff.new_BfsNode()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_BfsNode
    __del__ = lambda self: None
BfsNode_swigregister = _ff.BfsNode_swigregister
BfsNode_swigregister(BfsNode)

class BfsHashEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BfsHashEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BfsHashEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sum"] = _ff.BfsHashEntry_sum_set
    __swig_getmethods__["sum"] = _ff.BfsHashEntry_sum_get
    if _newclass:
        sum = _swig_property(_ff.BfsHashEntry_sum_get, _ff.BfsHashEntry_sum_set)
    __swig_setmethods__["bfs_node"] = _ff.BfsHashEntry_bfs_node_set
    __swig_getmethods__["bfs_node"] = _ff.BfsHashEntry_bfs_node_get
    if _newclass:
        bfs_node = _swig_property(_ff.BfsHashEntry_bfs_node_get, _ff.BfsHashEntry_bfs_node_set)
    __swig_setmethods__["next"] = _ff.BfsHashEntry_next_set
    __swig_getmethods__["next"] = _ff.BfsHashEntry_next_get
    if _newclass:
        next = _swig_property(_ff.BfsHashEntry_next_get, _ff.BfsHashEntry_next_set)

    def __init__(self):
        this = _ff.new_BfsHashEntry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ff.delete_BfsHashEntry
    __del__ = lambda self: None
BfsHashEntry_swigregister = _ff.BfsHashEntry_swigregister
BfsHashEntry_swigregister(BfsHashEntry)


def print_official_result():
    return _ff.print_official_result()
print_official_result = _ff.print_official_result

def print_official_op_name(index):
    return _ff.print_official_op_name(index)
print_official_op_name = _ff.print_official_op_name

def output_planner_info():
    return _ff.output_planner_info()
output_planner_info = _ff.output_planner_info

def ff_usage():
    return _ff.ff_usage()
ff_usage = _ff.ff_usage

def process_command_line(argc):
    return _ff.process_command_line(argc)
process_command_line = _ff.process_command_line

def oldmain(argc):
    return _ff.oldmain(argc)
oldmain = _ff.oldmain
# This file is compatible with both classic and new-style classes.

cvar = _ff.cvar

