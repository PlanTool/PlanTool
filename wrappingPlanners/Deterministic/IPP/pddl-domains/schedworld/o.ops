;; adapted and extended from UCPOP

(define (domain schedworld)
(:requirements :adl :typing)
(:types physobj condition width location  orient - object
	  tempcondition surfacecondition paintcondition shapecondition 
                            - condition)
(:predicates 
(temperature ?x - physobj ?t - tempcondition)
(is-at ?x - location) 
(surface-condition ?x - physobj ?s - surfacecondition)
(shape ?x - physobj ?s - shapecondition)
(has-hole ?x - physobj ?oldwidth  - width ?old-orient -orient)
(have-bit ?width - width)
(sprayable ?paint - paintcondition) 
(painted ?x - physobj ?paint - paintcondition)
(have-paint-for-immersion ?paint - paintcondition)
(have-supply ?p - paintcondition))

(:action POLISH
:parameters (?x - physobj)
:precondition (and (temperature ?x cold) (is-at sched)) 
:effect (and (surface-condition ?x polished)
             (forall (?old - paintcondition)
                 (when (not (eq  ?old nil))
                        (not (painted ?x ?old))))
             (forall (?oldsurf - surfacecondition)
                     (when (not (eq ?oldsurf polished))
                           (not (surface-condition ?x ?oldsurf))))))


(:action ROLL
:parameters (?x - physobj)
:precondition (is-at sched) 
:effect (and (temperature ?x hot)
             (shape ?x cylindrical)
             (painted ?x nil)
             (surface-condition ?x smooth)
             (forall (?old - paintcondition)
                 (when (not (eq  ?old nil))
                        (not (painted ?x ?old))))
             (forall (?old - shapecondition)
                  (when (not (eq  ?old cylindrical))
                        (not (shape ?x ?old))))
             (forall (?old - tempcondition)
                  (when (not (eq  ?old hot))
                        (not (temperature ?x ?old))))
             (forall (?old - surfacecondition)
                  (when (not (eq  ?old smooth))
                        (not (surface-condition ?x ?old))))
             (forall (?oldwidth - width ?old-orient - orient)
                  (not (has-hole ?x ?oldwidth ?old-orient)))))
 


(:action LATHE
:parameters (?x - physobj)
:precondition (and (is-at sched)  (temperature ?x cold))
:effect (and (surface-condition ?x rough)
             (shape ?x oblong)
             (temperature ?x hot)
             ( not (temperature?x cold))
             (forall (?old - paintcondition)
                 (when (not (eq  ?old nil))
                       (not (painted ?x ?old))))
             (forall (?old - shapecondition)                
                 (when (not (eq  ?old oblong))
                       (not (shape ?x ?old))))
             (forall (?old - surfacecondition)                    
                 (when (not (eq  ?old rough))
                       (not (surface-condition ?x ?old))))))


(:action GRIND
:parameters (?x - physobj)
:effect (and (surface-condition ?x smooth)
             (painted ?x nil)
             (forall (?old - paintcondition)
                 (when (not (eq  ?old nil))
                       (not (painted ?x ?old))))
             (forall (?old - surfacecondition)
                 (when (not (eq  ?old smooth))
                       (not (surface-condition ?x ?old))))))


 
(:action PUNCH
:parameters (?x - physobj  ?width - width ?orient - orient)
:precondition (and (is-at sched) (temperature ?x cold))
:effect (and (has-hole ?x ?width ?orient)
             (surface-condition ?x rough) 
             (forall (?old - paintcondition)
                 (when (not (eq  ?old nil))
                       (not (painted ?x ?old))))
             (forall (?oldsurf - surfacecondition)
                  (when (not (eq  ?oldsurf rough))
                        (not (surface-condition ?x ?oldsurf))))))


(:action DRILL-PRESS
:parameters (?x - physobj  ?width - width ?orient - orient)
:precondition (and (temperature ?x cold)
                   (have-bit ?width))
:effect (has-hole ?x ?width ?orient))


(:action SPRAY-PAINT
:parameters (?x  - physobj  ?paint - paintcondition)
:precondition (and (is-at sched) (temperature ?x cold)
                                 (sprayable ?paint))
:effect (and (painted ?x ?paint) (not (sprayable ?paint))))



(:action IMMERSION-PAINT
:parameters (?x - physobj  ?paint - paintcondition)
:precondition (have-paint-for-immersion ?paint)
:effect (painted ?x ?paint))



(:action COOL-DOWN
:parameters (?x - physobj )
:precondition (and (temperature ?x hot) (is-at sched)) 
:effect (and (temperature ?x cold) (not (temperature ?x hot))))


(:action MAKE-SPRAYABLE
:parameters (?p - paintcondition)
:precondition (and (have-supply ?p) (is-at sched))
:effect (and (sprayable ?p) (not (have-supply ?p))))


(:action BUY-PAINT
:parameters (?p - paintcondition)
:precondition (is-at store)
:effect (have-supply ?p))


(:action MOVE
:parameters (?l1 ?l2 - location)
:precondition (is-at ?l1)
:effect (and (is-at ?l2) (is-at ?l1))))

