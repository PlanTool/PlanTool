(define (domain ulm-skills)
  (:requirements :adl)
  (:types room object basket count)
  (:predicates 
(at ?r1 - room)
(location ?b - object ?r - room)
(arm-empty)
(free ?b - object) 
(on ?b - object ?c - object)
(holding ?b - object) 
(capacity ?bin - basket ?c1 - count)
(containing ?bin - basket ?c1 - count) 
(next ?c1 ?c2 - count)
(in ?obj  - object ?bin - basket))

(:action move-robot
:parameters (?r1 ?r2 - room)
:precondition (at ?r1)
:effect  (and  (at ?r2) (not (at ?r1))))
 

(:action take-object
:parameters (?b - object ?r - room)
:precondition (and (at ?r) (location ?b ?r) (arm-empty))
:effect (and
   (forall (?c - object) (when (and (free ?b) (not (on ?b ?c)))
           (and (holding ?b) (not (arm-empty)) (not (location  ?b ?r)))))
   (forall (?a - object ?c - object)
       (when (and (free ?a) (on ?a ?b) (not (on ?b ?c)))
             (and (holding ?b) (not (arm-empty)) (not (location  ?b ?r))
                  (not (location  ?a ?r)))))
   (forall (?c - object)
        (when (and (free ?b) (on ?b ?c))
              (and (holding ?b) (free ?c)
                   (not (arm-empty)) (not (location ?b ?r)))))
   (forall (?a - object ?c - object)
        (when (and (free ?a) (on ?a ?b) (on ?b ?c))
              (and (holding ?b) (free ?c)
                   (not (arm-empty)) (not (location  ?b ?r))
                   (not (location  ?a ?r)))))))


(:action take-one-object-from-base
:parameters (?b - object ?r - room)
:precondition (and (free ?b) (at ?r) (location ?b ?r) (arm-empty))
:effect (forall (?c - object) 
             (when (and (location ?c ?r) (not (on ?b ?c)))
                   (and (holding ?b) (not (arm-empty)) 
                        (not (location ?b ?r))))))

(:action take-one-object-from-object
:parameters (?b - object ?c - object ?r - room)
:precondition (and (free ?b) (on ?b ?c) (at ?r) 
                   (location ?b ?r) (arm-empty))
:effect (and (holding ?b) (free ?c) (not (arm-empty)) 
             (not (location  ?b ?r)) (not (on ?b ?c))))

 
(:action take-two-objects-from-base
:parameters (?b - object ?a - object ?r - room)
:precondition (and  (on ?a ?b) (at ?r) (location  ?b ?r) (arm-empty))
:effect  (forall ( ?c - object)
                (when (and (location ?c ?r) (not (on ?b ?c)))
                      (and (holding ?b) (not (arm-empty))
                           (not (location ?b ?r)) (not (location ?a ?r))))))
 
 
(:action take-two-objects-from-object
:parameters (?b ?a ?c - object ?r - room)
:precondition (and (on ?a ?b) (on ?b ?c) (at ?r) (location ?b ?r) (arm-empty))
:effect (and (holding ?b) (free ?c)
             (not (arm-empty)) (not (location  ?b ?r))
             (not (location ?a ?r)) (not (on ?b ?c))))


(:action take-bin
:parameters (?b - basket ?r - room)
:precondition (and (arm-empty) (at ?r) (location  ?b ?r))
:effect (and (holding ?b) (not (arm-empty)) (not (location ?b ?r))))
 
 
(:action drop-one-object
:parameters (?b - basket ?r - room)
:precondition (and (at ?r) (holding ?b))
:effect (and (location ?b ?r) (arm-empty) (not (holding ?b))))

 
(:action drop-two-objects
:parameters (?b - object ?a - object ?r -  room)
:precondition (and (at ?r) (holding ?b) (on ?a ?b))
:effect (and (location ?b ?r) (location ?a ?r) (arm-empty)
             (not (holding ?b))))
 
 
(:action put-object-in-basket
:parameters (?b - object ?bin - basket ?r - room ?c1 ?c2 - count)
:precondition (and (at ?r) (location ?bin ?r) (holding ?b)
                   (not (capacity ?bin ?c1)) (containing ?bin ?c1) 
                   (next ?c1 ?c2))
:effect (and (in ?b ?bin) (arm-empty) (containing ?bin ?c2)
             (not (holding ?b)) (not (containing ?bin ?c1))))
 
 
(:action put-two-objects-in-basket
:parameters (?b ?a - object ?bin - basket ?r  - room ?c1 ?c2 ?c3 - count)
:precondition (and (at ?r) (location ?bin ?r) (holding ?b) (on ?a ?b)
                   (not (capacity ?bin ?c2)) (containing ?bin ?c1) 
                   (not (capacity ?bin ?c1)) (next ?c1 ?c2) (next ?c2 ?c3))
:effect (and (in ?b ?bin) (in ?a ?bin) (arm-empty) (containing ?bin ?c3)
             (not (holding ?b)) (not (containing ?bin ?c1)) (not (on ?a ?b))))


(:action empty-basket
:parameters (?bin - basket ?r - room)
:precondition (and (holding ?bin) (at ?r))
:effect  (and (containing ?bin zero)
              (forall (?obj - object) 
                    (when (in ?obj ?bin) (location ?obj ?r))))))
 


