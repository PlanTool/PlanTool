(define (DOMAIN officebot)
  (:requirements :adl)
  (:types  cup drink subject  product approachable location - object
               door person physobj - approachable)
  (:predicates 
(nextto ?object - approachable)
(gripper-ok)
(at ?object - object ?loc - location)
(has ?object - object) 
(has-talked-to ?person - person ?subject - subject)
(is-at ?loc - location)
(full-cup ?cup - cup ?drink - drink)
(served ?drink - drink ?person - person) 
(answer ?person  - person ?subject - subject)
(radio-link) 
(informed ?person - person ?subject - subject) 
(check-mail ?person - person ?subject - subject)
(trash-clean) 
(sent-mail ?person - person ?subject - subject)
(logged-in ?person - person) 
(in-basket ?cup - cup) 
(cup-available ?cup - cup)
(dirty ?cup - cup )
(has-sweeper)
(sweeped ?loc - location)
(logged-in ?person - person)
(failed ?subject - subject)
(told-failure ?person - person ?subject - subject)
(logged-in ?person - person) 
(succeeded ?subject - subject)
(told-success ?person - person ?subject - subject)
(closed ?door - door) 
(nextto ?door - door)
(knock ?door - door)
(connects ?door  - door ?loc - location)
(cup-available ?cup - cup ) 
(fresh ?drink - drink) 
(nextto ?machine - machine) 
(full-cup ?cup  - cup ?drink - drink) 
(cup-available ?cup - cup )
(answer-yes ?room - location)
(free ?room - location)
(answer-res ?room - location)
(reserved ?room - location))



(:action get-object
:parameters ( ?object - physobj ?loc - location)
:precondition (and (nextto ?object) (gripper-ok) (at ?object ?loc))
:effect (and (has ?object) (not (nextto ?object)) (not (at ?object ?loc))))
 

;;go next to person and talk to her/him
(:action talk-to
:parameters (?person - person ?subject  - subject)
:precondition (nextto ?person)
:effect (has-talked-to ?person ?subject))

;;carry object to location
(:action deliver
:parameters (?to - location ?object - physobj)
:precondition (and (has ?object) (is-at ?to))
:effect (and (at ?object ?to) (not (has ?object)) (not (has ?object))))
   
;;carry drink to a person
(:action serve-drink
:parameters (?person - person  ?drink - drink ?cup - cup)
:precondition (and (full-cup ?cup ?drink) (nextto ?person))
:effect (and (served ?drink ?person) (not (has ?cup))
             (not (full-cup ?cup ?drink))))

;; go next to approachable object
(:action nextto
:parameters (?to - location ?object - approachable)
:precondition (and (is-at ?to) (at ?object ?to))
:effect (and (nextto ?object)
   (forall(?obj - approachable)(when (nextto ?obj) (not (nextto ?obj))))))

;; ask question 
(:action ask-info
:parameters (?person - person ?subject -  subject )
:precondition  (nextto ?person) 
:effect  (answer ?person ?subject))
    

;;send email and receive reply
(:action get-info
:parameters (?person - person ?subject - subject)
:precondition (and (radio-link) (informed ?person ?subject) 
                   (check-mail ?person ?subject))
:effect (answer ?person ?subject))


(:action send-mail
:parameters (?person - person ?subject - subject)
:precondition (radio-link) 
:effect (and (sent-mail ?person ?subject)
    (when (logged-in ?person) (informed ?person ?subject))))

	
(:action read-mail
:parameters (?person - person ?subject ?answer - subject)
:precondition (and (radio-link) (informed ?person ?subject))
:effect (check-mail ?person ?subject ?answer))



(:action check-for-cup
:parameters  ()
:precondition (is-at sek)
:effect (forall (?cup - cup) (when (in-basket ?cup) (cup-available ?cup))))

;; have secretary clean cup
(:action clean-cup
:parameters (?person - person ?cup - cup)
:precondition (and (is-at sek) (at ?person sek) (dirty ?cup))
:effect (and (in-basket ?cup) (not (dirty ?cup))))


(:action collect-trash
:parameters (?loc - location)
:precondition (and (is-at ?loc) (gripper-ok))
:effect (trash-clean ?loc))


(:action clean-sweep
:parameters (?loc - location)
:precondition (and (is-at ?loc) (has-sweeper))
:effect (sweeped ?loc))


(:action watch-out
:parameters (?loc - location)
:precondition (is-at ?loc) 
:effect (watching-out ?loc))


(:action load-batteries
:parameters (?person - person)
:precondition (and (nextto ?person) (can-load ?person) (low batteries))
:effect (and (loaded batteries) (not (low batteries))))


(:action inform-failure
:parameters (?subject - subject ?person - person)
:precondition (and (radio-link) (logged-in ?person) (failed ?subject))
:effect (told-failure ?person ?subject))

(:action inform-success
:parameters (?subject - subject ?person - person)
:precondition (and (radio-link) (logged-in ?person) (succeeded ?subject))
:effect (told-success ?person ?subject))


(:action knock-on
:parameters (?door - door)
:precondition (and (closed ?door) (nextto ?door))
:effect (knock ?door))
   

(:action enter
:parameters (?door - door ?loc - location)
:precondition (and (open ?door) (nextto ?door) (connects ?door ?loc))
:effect (and (is-at ?loc) (not (nextto ?door))
             (forall (?l - location) (when (is-at ?l) (not (is-at ?l))))))
 


(:action prepare
:parameters (?drink - drink  ?product - product ?machine - physobj)
:precondition (and  (nextto ?machine) (has ?product) 
                    (has water) (branched ?machine)) 
:effect (and (fresh ?drink) (not (has ?product)) (not (has water))))


(:action fill-cup
:parameters (?cup - cup ?drink - drink ?machine - physobj)
:precondition (and (cup-available ?cup) (fresh ?drink) (nextto ?machine)) 
:effect (and (full-cup ?cup ?drink) (not (cup-available ?cup))))


(:action check-free-room
:parameters (?room - room)
:precondition (answer-yes ?room)
:effect (free ?room))


(:action room-reservation
:parameters (?room - room) 
:precondition (and (free ?room) (answer-res ?room))
:effect (reserved ?room)))
