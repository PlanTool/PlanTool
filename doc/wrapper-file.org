* steps of wrapping a planner
  1. Adding planner swig interface file
     #+BEGIN_SRC sh
     touch PLANNER.i
     #+END_SRC

     Adding functions for wrapping
     At present, only *main()* wrapped
     #+BEGIN_SRC swig interface
     %module PLANNER

     %include <argcargv.i>

     %{
     #include "PLANNER.h"
     %}

     %apply (int ARGC, char **ARGV) { (int argc, char *argv[]) }

     int oldmain( int argc, char *argv[] );
     #+END_SRC

  2. Editing PLANNER.h(where swig interface wrap) and main.c(where the main() are defined)
     - Adding oldmain() declaration in PLANNER.h
       #+BEGIN_SRC c
       /**********************************************************/
       /* SWIG Wrapping*/
       int oldmain( int argc, char * argv[] );
       #+END_SRC

     - Adding oldmain() in main.c and modified it to have the same source code as main()
       #+BEGIN_SRC c
       int oldmain( int argc, char * argv[] ) {
          //  Source code of main()
          //  ...
       }
       #+END_SRC

  3. Modifying makefile
     - Adding gcc -fPIC flag
     #+BEGIN_SRC makefile
     -fPIC
     #+END_SRC

     - Adding INC_PYTHON to compile PLANNER_wrap.c
     #+BEGIN_SRC makefile
     INC_PYTHON = -I/usr/include/python2.7
     #+END_SRC

     - Adding dynamic loading
     #+BEGIN_SRC makefile
     _PLANNER.so: $(OBJECTS) $(PDDL_PARSER_OBJ) PLANNER_wrap.o
     gcc -shared -o $@ $^

     PLANNER_wrap.o: PLANNER_wrap.c
     $(CC) -c $(INC_PYTHON) $^

     PLANNER.py PLANNER_wrap.c: PLANNER.i
     swig -python PLANNER.i
     #+END_SRC

  4. Use python import
